{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","form","email","elementType","elementConfig","type","placeholder","value","validator","required","valid","touched","password","minLength","isSignup","submitHandler","event","preventDefault","props","onAuth","handleSwitch","setState","prevState","this","isBuilding","authRedirectPath","onSetAuthRedirect","elementKey","updatedFormElement","updateObject","target","toucher","isValid","isInputValid","updatedForm","formElements","errorMessage","key","error","style","color","message","push","config","map","element","onChange","inputChangedHandler","bind","isTouched","shouldValidate","loading","authRedirect","isAuthenticated","to","onSubmit","className","css","onClick","Component","connect","auth","token","burgerBuilder","building","dispatch","actionCreators","input","inputElement","inputClasses","InputElement","Invalid","join","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.145f5df9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport css from './Auth.module.css';\nimport * as actionCreators from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport {updateObject, isInputValid} from '../../shared/utility';\n\nclass Auth extends Component {\n\n    state = {\n        form: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email'\n                },\n                value: '',\n                validator: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validator: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        email: '',\n        password: '',\n        isSignup: true\n    };\n\n    componentDidMount() {\n        if(!this.props.isBuilding && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirect();\n        }\n    }\n\n    inputChangedHandler(elementKey, event) {\n        /* const updatedForm = { ...this.state.form };\n        const updatedFormElement = { ...updatedForm[elementKey] };\n\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.touched = true;\n        updatedFormElement.isValid = this.isInputValid(updatedFormElement.value, updatedFormElement.validator);\n        updatedForm[elementKey] = updatedFormElement; */\n\n        const updatedFormElement = updateObject(this.state.form[elementKey], {\n            value: event.target.value,\n            toucher: true,\n            isValid: isInputValid(event.target.value, this.state.form[elementKey].validator)\n        });\n\n        const updatedForm = updateObject(this.state.form, {\n            [elementKey]: updatedFormElement\n        })\n\n        this.setState({ form: updatedForm });\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.form.email.value, this.state.form.password.value, this.state.isSignup);\n\n    }\n\n    handleSwitch = (event) => {\n        event.preventDefault();\n        this.setState(prevState => {\n            return { isSignup: prevState.isSignup ? false : true }\n        });\n    }\n\n    render() {\n        const formElements = [];\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = <p style={{ color: 'red' }}> {this.props.error.message} </p>;\n        };\n\n        for (let key in this.state.form) {\n            formElements.push({ key: key, config: this.state.form[key] });\n        }\n        let form = formElements.map(element => {\n            return <Input\n                key={element.key}\n                onChange={this.inputChangedHandler.bind(this, element.key)}\n                elementType={element.config.elementType}\n                elementConfig={element.config.elementConfig}\n                isValid={!element.config.valid}\n                isTouched={element.config.touched}\n                shouldValidate={element.config.validator}\n                value={element.config.value} />\n        });\n\n        if (this.props.loading) form = <Spinner />;\n\n        let authRedirect = null\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n\n        return (\n            <form onSubmit={this.submitHandler} className={css.Auth} >\n                {authRedirect}\n                {form}\n                {errorMessage}\n                <Button type=\"Success\" > SUBMIT </Button>\n                <Button onClick={this.handleSwitch} type='Danger'> SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'} </Button>\n            </form>\n        )\n    }\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token ? true : false,\n        isBuilding: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actionCreators.auth(email, password, isSignup)),\n        onSetAuthRedirect: () => dispatch(actionCreators.set_auth_redirect_path('/'))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\nimport css from './Input.module.css';\n\nconst input = props => {\n    let inputElement = null;\n\n    let inputClasses = [css.InputElement];\n    if (props.isValid && props.shouldValidate && props.isTouched)\n        inputClasses.push(css.Invalid);\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                onChange={props.onChange}\n                {...props.elementConfig}\n                value={props.value} />\n            break;\n\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                onChange={props.onChange}\n                {...props.elementConfig}\n                value={props.value} />\n            break;\n\n        case ('select'):\n            inputElement = <select\n                onChange={props.onChange}\n                value={props.value}\n                className={inputClasses.join(' ')}>\n                {props.elementConfig.options.map(option => {\n                    return <option key={option.value} value={option.value} > {option.displayValue} </option>\n                })}\n            </select>\n            break;\n\n        default:\n            inputElement = <input\n                className={css.InputElement}\n                onChange={props.onChange}\n                {...props.elementConfig}\n                value={props.value} />\n    }\n\n    return (\n        <div className={css.Input} >\n            <label className={css.Label} > {props.label} </label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}