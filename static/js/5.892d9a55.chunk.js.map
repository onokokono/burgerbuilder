{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","transformedIngredients","key","ingredients","push","name","count","map","ig","className","css","igSpan","Order","totalPrice","Orders","this","onFetchOrders","token","UID","Spinner","loading","orders","id","price","Component","connect","state","auth","userId","dispatch","actionCreators"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,OAAS,wB,kHCwBzCC,EAtBD,SAAAC,GAEV,IAAMC,EAAyB,GAC/B,IAAK,IAAIC,KAAOF,EAAMG,YAClBF,EAAuBG,KAAK,CACxBC,KAAMH,EACNI,MAAON,EAAMG,YAAYD,KAIjC,IAAMC,EAAcF,EAAuBM,KAAI,SAAAC,GAC3C,OAAO,0BAAMC,UAAWC,IAAIC,OAAQT,IAAKM,EAAGH,MAArC,IAA6CG,EAAGH,KAAhD,KAAwDG,EAAGF,MAA3D,SAGX,OACI,yBAAKG,UAAWC,IAAIE,OAChB,4CAAkBT,EAAlB,KACA,sCAAW,wCAAcH,EAAMa,WAApB,KAAX,O,gBCdNC,E,kLAGEC,KAAKf,MAAMgB,cAAcD,KAAKf,MAAMiB,MAAOF,KAAKf,MAAMkB,O,+BAItD,IAAInB,EAAQ,kBAACoB,EAAA,EAAD,MAUZ,OATKJ,KAAKf,MAAMoB,UACZrB,EAAQgB,KAAKf,MAAMqB,OAAOd,KAAI,SAAAR,GAAK,OAC/B,kBAACa,EAAD,CACIV,IAAKH,EAAMuB,GACXnB,YAAaJ,EAAMI,YACnBU,WAAYd,EAAMwB,YAK1B,6BACKxB,O,GAnBIyB,aAwCNC,uBAfS,SAAAC,GACpB,MAAO,CACHL,OAAQK,EAAM3B,MAAMsB,OACpBD,QAASM,EAAM3B,MAAMqB,QACrBH,MAAOS,EAAMC,KAAKV,MAClBC,IAAKQ,EAAMC,KAAKC,WAIG,SAAAC,GACvB,MAAO,CACHb,cAAe,SAACC,EAAOC,GAAR,OAAgBW,EAASC,IAA2Bb,EAAOC,QAInEO,CAA6CX","file":"static/js/5.892d9a55.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3kYZJ\",\"igSpan\":\"Order_igSpan__3PscK\"};","import React from 'react';\nimport css from './Order.module.css'\n\nconst order = props => {\n\n    const transformedIngredients = [];\n    for (let key in props.ingredients) {\n        transformedIngredients.push({\n            name: key,\n            count: props.ingredients[key]\n        });\n    }\n\n    const ingredients = transformedIngredients.map(ig => {\n        return <span className={css.igSpan} key={ig.name}> {ig.name} ({ig.count}) </span>\n    })\n\n    return (\n        <div className={css.Order}>\n            <p> Ingredients: {ingredients} </p>\n            <p> Price: <strong> USD {props.totalPrice} </strong> </p>\n        </div>\n    );\n}\n\nexport default order;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport * as actionCreators from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n\n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token, this.props.UID);\n    }\n\n    render() {\n        let order = <Spinner />;\n        if (!this.props.loading) {\n            order = this.props.orders.map(order =>\n                <Order\n                    key={order.id}\n                    ingredients={order.ingredients}\n                    totalPrice={order.price}\n                />);\n        }\n\n        return (\n            <div>\n                {order}\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        UID: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, UID) => dispatch(actionCreators.fetchOrders(token, UID))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);"],"sourceRoot":""}